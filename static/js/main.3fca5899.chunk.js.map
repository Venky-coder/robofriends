{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchChange","className","type","placeholder","onChange","Card","props","alt","src","id","name","email","CardList","robot","map","user","i","key","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filterRobot","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,OACV,2BAAOA,UAAW,mCAClBC,KAAK,SACLC,YAAY,eACZC,SAAUJ,MCMRK,EAZF,SAACC,GACV,OACI,yBAAKL,UAAU,oDAClB,yBAAKM,IAAI,QAAQC,IAAK,wBAA0BF,EAAMG,GAAK,kBAC3D,6BACA,4BAAKH,EAAMI,MACX,2BAAIJ,EAAMK,UCgBAC,EArBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEhB,OACI,6BACMA,EAAMC,KAAI,SAACC,EAAKC,GAEzB,OACC,kBAAC,EAAD,CAAMC,IAAKD,EACXP,GAAII,EAAMG,GAAGP,GACZC,KAAMG,EAAMG,GAAGN,KACdC,MAAOE,EAAMG,GAAGL,aCFTO,G,MATA,SAACZ,GAEf,OACC,yBAAKa,MAAO,CAACC,UAAW,SAAWC,OAAQ,kBAAoBC,OAAQ,UACtEhB,EAAMiB,YCmBMC,E,kDArBX,WAAYlB,GACX,IAAD,8BACI,cAAMA,IACDmB,MAAQ,CACTC,UAAW,GAHnB,E,8DAOkBC,EAAQC,GAEtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,4DAEDG,KAAKvB,MAAMiB,a,GAnBGQ,aCwDbC,E,kDAjDX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACTZ,MAAO,GACPsB,YAAa,IAJP,E,gEASb,IAAD,OACGG,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKZ,SAAS,CAACjB,MAAO6B,S,+BAQhB,IAAD,EAC2Bb,KAAKJ,MAA7BZ,EADH,EACGA,MAAQsB,EADX,EACWA,YACTQ,EAAc9B,EAAM+B,QAAO,SAAA/B,GAC9B,OAAOA,EAAMH,KAAKmC,cAAcC,SAASX,EAAYU,kBAExD,OAAIhC,EAAMkC,OAQP,yBAAK9C,UAAU,MACf,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWD,aAAc6B,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,MAAO8B,OAVlB,2C,GA/BMZ,aCDlBiB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACA,6BACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SPsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.3fca5899.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n             <input className ='pa3 ba b--green bg-lightest-blue' \r\n             type=\"search\" \r\n             placeholder=\"Search Robot\"\r\n             onChange={searchChange}\r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t   <img alt='Robot' src={'https://robohash.org/' + props.id + '?size=200x200'} />\r\n\t\t   <div> \r\n\t\t   <h2>{props.name}</h2>\r\n\t\t   <p>{props.email}</p>\r\n\t\t   </div>\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robot }) => {\r\n\r\n    return (\r\n        <div>\r\n           {  robot.map((user,i) =>\r\n{\r\n     return(\r\n      <Card key={i}\r\n      id={robot[i].id}\r\n       name={robot[i].name}\r\n        email={robot[i].email}\r\n        />\r\n        );\r\n}\r\n)\r\n\r\n       }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll' , border: '5px solid black' , height: '800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            hasError : false \r\n        }\r\n    }\r\n\r\n    componentDidCatch(error , info)\r\n    {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n       if (this.state.hasError) {\r\n        return <h1> Ooops. this is not good!!! </h1>\r\n       }\r\n       return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robot: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n       fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n        return response.json();\r\n       })\r\n       .then(users=>{\r\n        this.setState({robot: users});\r\n        })\r\n    }\r\n\r\n    onSearchChange = (event)=> {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const { robot , searchField } = this.state ;\r\n         const filterRobot = robot.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n         if(!robot.length)\r\n         {\r\n            return(\r\n            <h1>Loading</h1>\r\n            );\r\n         }\r\n         else{\r\n        return (\r\n            <div className='tc'> \r\n            <h1 className='f2'>Robot Friends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n             <CardList robot={filterRobot}/>\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n    <React.StrictMode>\n    <div> \n      <App />\n    </div>\n  </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}